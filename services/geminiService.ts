import { GoogleGenAI, Modality } from "@google/genai";

export const editImageWithGemini = async (
  base64ImageData: string,
  mimeType: string,
  prompt: string,
  maskDataUrl?: string
): Promise<string> => {
  if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable is not set.");
  }
  const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

  try {
    const imagePart = {
      inlineData: {
        data: base64ImageData,
        mimeType: mimeType,
      },
    };
    const textPart = { text: prompt };

    const parts = [imagePart, textPart];

    if (maskDataUrl) {
      const [header, maskBase64] = maskDataUrl.split(',');
      const mimeTypeMatch = header.match(/:(.*?);/);
      if (maskBase64 && mimeTypeMatch && mimeTypeMatch[1]) {
        const maskPart = {
          inlineData: {
            data: maskBase64,
            mimeType: mimeTypeMatch[1],
          },
        };
        // Insert mask between image and prompt
        parts.splice(1, 0, maskPart);
      } else {
        console.warn("Could not parse mask data URL, sending request without mask.");
      }
    }

    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: {
        parts: parts,
      },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    for (const part of response.candidates[0].content.parts) {
      if (part.inlineData) {
        const newBase64 = part.inlineData.data;
        const newMimeType = part.inlineData.mimeType;
        return `data:${newMimeType};base64,${newBase64}`;
      }
    }

    throw new Error("No image was generated by the API. The response may have been blocked.");
  } catch (error) {
    console.error("Error calling Gemini API for image editing:", error);
    if (error instanceof Error && error.message.includes('API key not valid')) {
       throw new Error("The API key is invalid. Please check your configuration.");
    }
    throw new Error("Failed to generate image. Please try again later.");
  }
};

export const animateImageWithGemini = async (
  base64ImageData: string,
  mimeType: string,
  prompt: string,
  aspectRatio: '16:9' | '9:16'
): Promise<{ objectUrl: string; blob: Blob }> => {
    if (!process.env.API_KEY) {
        throw new Error("API_KEY environment variable is not set for video generation.");
    }
    // Create a new instance right before the call to ensure the latest key is used.
    const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

    try {
        let operation = await ai.models.generateVideos({
            model: 'veo-3.1-fast-generate-preview',
            prompt: prompt,
            image: {
                imageBytes: base64ImageData,
                mimeType: mimeType,
            },
            config: {
                numberOfVideos: 1,
                resolution: '720p',
                aspectRatio: aspectRatio 
            }
        });

        // Poll for completion
        while (!operation.done) {
            await new Promise(resolve => setTimeout(resolve, 5000)); // Wait 5 seconds between polls
            // @ts-ignore
            operation = await ai.operations.getVideosOperation({ operation: operation });
        }

        const downloadLink = operation.response?.generatedVideos?.[0]?.video?.uri;
        if (!downloadLink) {
            throw new Error("Video generation completed, but no download link was found.");
        }

        // Fetch the video and return a blob URL
        const response = await fetch(`${downloadLink}&key=${process.env.API_KEY}`);
        if (!response.ok) {
            const errorBody = await response.text();
            console.error("Failed to download video:", errorBody);
            throw new Error(`Failed to download the generated video. Status: ${response.status}`);
        }
        
        const videoBlob = await response.blob();
        return { objectUrl: URL.createObjectURL(videoBlob), blob: videoBlob };

    } catch (error) {
        console.error("Error calling Gemini API for video animation:", error);
        if (error instanceof Error && error.message.includes('API key not valid')) {
            throw new Error("The API key is invalid. Please check your configuration.");
        }
         if (error instanceof Error && error.message.includes('404')) {
            throw new Error("Requested entity was not found. This can happen with an invalid API key. Please re-select your key.");
        }
        throw new Error("Failed to generate video. Please try again later.");
    }
};